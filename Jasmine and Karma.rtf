{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs32\lang9 We can test our Angular applications from scratch by writing and executing pure JavaScript functions. Creating instances of the relevant classes, calling functions and checking the actual versus expected result.\par
\par
But since testing is such a common activity with JavaScript there are a number of testing libraries and frameworks we can use which reduce the amount of time it takes to write tests.\par
\par
Two such tools and frameworks that are used when testing Angular is Jasmine and Karma and a discussion of those is the topic of this lecture.\par
\par
Learning Objectives\par
What is the Jasmine test framework?\par
\par
How to write tests in Jasmine?\par
\par
What is the Karma test runner?\par
\par
How to create and run tests using the Angular CLI?\par
\par
How to create and run tests in Plunker?\par
\par
Jasmine\par
Jasmine is a JavaScript testing framework that supports a software development practice called Behaviour-Driven Development, or BDD for short. It\rquote s a specific flavour of Test-Driven Development (TDD).\par
\par
Jasmine, and BDD in general, attempts to describe tests in a human readable format so that non-technical people can understand what is being tested. However even if you are technical reading tests in BDD format makes it a lot easier to understand what\rquote s going on.\par
\par
For example if we wanted to test this function:\par
\par
TypeScript\par
function helloWorld() \{\par
  return 'Hello world!';\par
\}\par
We would write a Jasmine test spec like so:\par
\par
TypeScript\par
describe('Hello world', () => \{ (1)\par
  it('says hello', () => \{ (2)\par
    expect(helloWorld()) (3)\par
        .toEqual('Hello world!'); (4)\par
  \});\par
\});\par
The describe(string, function) function defines what we call a Test Suite, a collection of individual Test Specs.\par
The it(string, function) function defines an individual Test Spec, this contains one or more Test Expectations.\par
The expect(actual) expression is what we call an Expectation. In conjunction with a Matcher it describes an expected piece of behaviour in the application.\par
The matcher(expected) expression is what we call a Matcher. It does a boolean comparison with the expected value passed in vs. the actual value passed to the expect function, if they are false the spec fails.\par
Built-In Matchers\par
Jasmine comes with a few pre-built matchers like so:\par
\par
TypeScript\par
expect(array).toContain(member);\par
expect(fn).toThrow(string);\par
expect(fn).toThrowError(string);\par
expect(instance).toBe(instance);\par
expect(mixed).toBeDefined();\par
expect(mixed).toBeFalsy();\par
expect(mixed).toBeNull();\par
expect(mixed).toBeTruthy();\par
expect(mixed).toBeUndefined();\par
expect(mixed).toEqual(mixed);\par
expect(mixed).toMatch(pattern);\par
expect(number).toBeCloseTo(number, decimalPlaces);\par
expect(number).toBeGreaterThan(number);\par
expect(number).toBeLessThan(number);\par
expect(number).toBeNaN();\par
expect(spy).toHaveBeenCalled();\par
expect(spy).toHaveBeenCalledTimes(number);\par
expect(spy).toHaveBeenCalledWith(...arguments);\par
You can see concrete examples of how these matchers are used by looking at the Jasmine docs here: {{\field{\*\fldinst{HYPERLINK http://jasmine.github.io/edge/introduction.html#section-Included_Matchers }}{\fldrslt{http://jasmine.github.io/edge/introduction.html#section-Included_Matchers\ul0\cf0}}}}\f0\fs32\par
\par
Setup and Teardown\par
Sometimes in order to test a feature we need to perform some setup, perhaps it\rquote s creating some test objects. Also we may need to perform some cleanup activities after we have finished testing, perhaps we need to delete some files from the hard drive.\par
\par
These activities are called setup and teardown (for cleaning up) and Jasmine has a few functions we can use to make this easier:\par
\par
beforeAll\par
This function is called once, before all the specs in a test suite (describe function) are run.\par
\par
afterAll\par
This function is called once after all the specs in a test suite are finished.\par
\par
beforeEach\par
This function is called before each test specification (it function) is run.\par
\par
afterEach\par
This function is called after each test specification is run.\par
\par
We might use these functions like so:\par
\par
TypeScript\par
describe('Hello world', () => \{\par
\par
  let expected = "";\par
\par
  beforeEach(() => \{\par
    expected = "Hello World";\par
  \});\par
\par
  afterEach(() => \{\par
    expected = "";\par
  \});\par
\par
  it('says hello', () => \{\par
    expect(helloWorld())\par
        .toEqual(expected);\par
  \});\par
\});\par
Running Jasmine Tests\par
To manually run Jasmine tests we would create a HTML file and include the required Jasmine JavaScript and CSS files like so:\par
\par
HTML\par
<link rel="stylesheet" href="jasmine.css">\par
<script src="jasmine.js"></script>\par
<script src="jasmine-html.js"></script>\par
<script src="boot.js"></script>\par
We then load in the parts of our application code that we want to test, for example if our hello world function was in main.js:\par
\par
HTML\par
<link rel="stylesheet" href="jasmine.css">\par
<script src="jasmine.js"></script>\par
<script src="jasmine-html.js"></script>\par
<script src="boot.js"></script>\par
\par
<script src="main.js"></script>\par
Important\par
The order of script tags is important.\par
We then would load each individual test suite file, for example if we placed our test suite code above in a file called test.js we would load it in like so:\par
\par
HTML\par
<link rel="stylesheet" href="jasmine.css">\par
<script src="jasmine.js"></script>\par
<script src="jasmine-html.js"></script>\par
<script src="boot.js"></script>\par
\par
<script src="main.js"></script>\par
\par
<script src="test.js"></script>\par
To run the tests we simply open up the HTML file in a browser.\par
\par
Once all the files requested via script and link are loaded by a browser the function window.onload is called, this is when Jasmine actually runs the tests.\par
\par
The results are displayed in the browser window, a failing run looks like:\par
\par
jasmine fail\par
A passing run looks like:\par
\par
jasmine pass\par
If we wanted to test our code in different browsers we simply load up the HTML file in the browser we want to test in.\par
\par
If we wanted to debug the code we would use the developer tools available to us in that browser.\par
\par
Karma\par
Manually running Jasmine tests by refreshing a browser tab repeatedly in different browsers every time we edit some code can become tiresome.\par
\par
Karma is a tool which lets us spawn browsers and run Jasmine tests inside of them all from the command line. The results of the tests are also displayed on the command line.\par
\par
Karma can also watch your development files for changes and re-run the tests automatically.\par
\par
Karma lets us run Jasmine tests as part of a development tool chain which requires tests to be runnable and results inspectable via the command line.\par
\par
It\rquote s not necessary to know the internals of how Karma works. When using the Angular CLI it handles the configuration for us and for the rest of this section we are going to run the tests using only Jasmine.\par
\par
Angular CLI\par
When creating Angular projects using the Angular CLI it defaults to creating and running unit tests using Jasmine and Karma.\par
\par
Whenever we create files using the CLI, as well as creating the main code file it also creates a simple Jasmine spec file named the same as the main code file but ending in .spec.ts.\par
\par
So if we create a Pipe using the CLI, like so:\par
\par
ng generate pipe My\par
This would create two files:\par
\par
my-pipe.ts \f1\emdash  This is the main code file where we put the code for the pipe.\par
\par
my-pipe.spec.ts \emdash  This is the Jasmine test suite for the pipe.\par
\par
The spec file will have some code already bootstrapped, like so:\par
\par
TypeScript\par
import \{ TestBed, async \} from '@angular/core/testing';\par
import \{ MyPipe \} from './my.pipe';\par
\par
describe('Pipe: My', () => \{\par
  it('should create an instance', () => \{\par
    let pipe = new MyPipe();\par
    expect(pipe).toBeTruthy();\par
  \});\par
\});\par
Note\par
The code that gets bootstrapped depends on the item that we are creating.\par
To run all the tests in our application we simply type ng test in our project root.\par
\par
This runs all the tests in our project in Jasmine via Karma.\par
\par
It watches for changes to our development files, bundles all the developer files together and re-runs the tests automatically.\par
\par
Angular Plunker\par
When building real Angular applications I recommend sticking with the file and folder structure defined by the Angular CLI as well as using the built-in test runner.\par
\par
However for this section, to give you an easy way to view and play with the code we are going to use only Jasmine and execute tests by refreshing a browser.\par
\par
This so we can easily share code via a Plunker like we have done for all the other sections in this course.\par
\par
An Angular Jasmine Plunker looks very similar to a normal Jasmine Plunker apart from a few key differences:\par
\par
We also include the required Angular libraries and some patches for Jasmine so it works better with Angular.\par
\par
HTML\par
<script src="{{\field{\*\fldinst{HYPERLINK https://unpkg.com/systemjs@0.19.27/dist/system.src.js }}{\fldrslt{https://unpkg.com/systemjs@0.19.27/dist/system.src.js\ul0\cf0}}}}\f1\fs32 "></script>\par
<script src="{{\field{\*\fldinst{HYPERLINK https://unpkg.com/reflect-metadata@0.1.3 }}{\fldrslt{https://unpkg.com/reflect-metadata@0.1.3\ul0\cf0}}}}\f1\fs32 "></script>\par
<script src="{{\field{\*\fldinst{HYPERLINK https://unpkg.com/zone.js@0.6.25?main=browser }}{\fldrslt{https://unpkg.com/zone.js@0.6.25?main=browser\ul0\cf0}}}}\f1\fs32 "></script>\par
<script src="{{\field{\*\fldinst{HYPERLINK https://unpkg.com/zone.js/dist/long-stack-trace-zone.js?main=browser }}{\fldrslt{https://unpkg.com/zone.js/dist/long-stack-trace-zone.js?main=browser\ul0\cf0}}}}\f1\fs32 "></script>\par
<script src="{{\field{\*\fldinst{HYPERLINK https://unpkg.com/zone.js/dist/proxy.js?main=browser }}{\fldrslt{https://unpkg.com/zone.js/dist/proxy.js?main=browser\ul0\cf0}}}}\f1\fs32 "></script>\par
<script src="{{\field{\*\fldinst{HYPERLINK https://unpkg.com/zone.js/dist/sync-test.js?main=browser }}{\fldrslt{https://unpkg.com/zone.js/dist/sync-test.js?main=browser\ul0\cf0}}}}\f1\fs32 "></script>\par
<script src="{{\field{\*\fldinst{HYPERLINK https://unpkg.com/zone.js/dist/jasmine-patch.js?main=browser }}{\fldrslt{https://unpkg.com/zone.js/dist/jasmine-patch.js?main=browser\ul0\cf0}}}}\f1\fs32 "></script>\par
<script src="{{\field{\*\fldinst{HYPERLINK https://unpkg.com/zone.js/dist/async-test.js?main=browser }}{\fldrslt{https://unpkg.com/zone.js/dist/async-test.js?main=browser\ul0\cf0}}}}\f1\fs32 "></script>\par
<script src="{{\field{\*\fldinst{HYPERLINK https://unpkg.com/zone.js/dist/fake-async-test.js?main=browser }}{\fldrslt{https://unpkg.com/zone.js/dist/fake-async-test.js?main=browser\ul0\cf0}}}}\f1\fs32 "></script>\par
We then add the spec files we want to test into a special array called spec_files.\par
\par
HTML\par
var __spec_files__ = [\par
  'app/auth.service.spec'\par
];\par
We then load a shim JavaScript file which triggers running the test specs once we have finished transpiling and loading the transpiled files in the browser.\par
\par
HTML\par
<script src="browser-test-shim.js"></script>\par
Disabled and Focused Tests\par
You can disable tests without commenting them out by just pre-pending x to the describe or it functions, like so:\par
\par
TypeScript\par
xdescribe('Hello world', () => \{ (1)\par
  xit('says hello', () => \{ (1)\par
    expect(helloWorld())\par
        .toEqual('Hello world!');\par
  \});\par
\});\par
These tests will not be run.\par
Conversely you can also focus on specific tests by pre-pending with f, like so:\par
\par
TypeScript\par
fdescribe('Hello world', () => \{ (1)\par
  fit('says hello', () => \{ (1)\par
    expect(helloWorld())\par
        .toEqual('Hello world!');\par
  \});\par
\});\par
Out of all the tests in all the tests suites and tests specs, these are the only ones that will be run.\par
Summary\par
Jasmine is a testing framework that supports Behavior-Driven Development. We write tests in Test Suites which are composed of one or more Test Specs which themselves are composed of one or more Test Expectations.\par
\par
We can run Jasmine tests in a browser ourselves by setting up and loading a HTML file, but more commonly we use a command-line tool called Karma. Karma handles the process of creating HTML files, opening browsers and running tests and returning the results of those tests to the command line.\par
\par
If you use the Angular CLI to manage projects it automatically creates stub Jasmine spec files for you when generating code. It also handles the Karama configuration, transpilation and bundling of your files so all you need to do in order to run your tests is type the command ng test.\par
\par
For the purposes of this section we will be using a simple browser based Jasmine test runner so we can share the code easily via Plunker.\par
\par
Listing\par
Listing 1. main.ts\par
TypeScript\par
export function helloWorld() \{\par
  return 'Hello world!';\par
\}\par
Listing 2. test.ts\par
TypeScript\par
import \{\par
    helloWorld\par
\} from "./main"\par
\par
describe('Hello world', () => \{\par
\par
    let expected = "";\par
\par
    beforeEach(() => \{\par
        expected = "Hello world!";\par
    \});\par
\par
    afterEach(() => \{\par
        expected = "";\par
    \});\par
\par
    it('says hello', () => \{\par
        expect(helloWorld())\par
            .toEqual(expected);\par
    \});\par
\});\f0\par
}
 